1. What's the difference between an inner and outer join?

Joins are used to combine the data from two tables, with the result being a new, temporary table. The temporary
table is created based on the column(s) that the two tables share, which represent meaningful column(s) of comparison.
The goal is to extract meaningful data from the resulting temporary table. Joins are performed based
on something called a predicate, which specifies the condition to use in order to perform a join. A
join can be either an inner join or an outer join, depending on how one wants the resulting table to 
look.
It is best to illustrate the differences between inner and outer joins by use of an example. Here we
have 2 tables that we will use for our example:
Employee                     Location
EmpID  EmpName            EmpID    EmpLoc
13    Jason               13       San Jose
8     Alex                8        Los Angeles
3     Ram                 3        Pune, India
17    Babu                17       Chennai, India
25    Johnson             39       Bangalore, India

It's important to note that the very last row in the employee table does not exist in the employee 
location table. Also, the very last row in the employee location table does not exist in the employee table. 
These facts will prove to be significant in the discussion that follows.

Outer Joins
Let's start the explanation with outer joins. Outer joins can be further divided into left outer joins, right
outer joins, and full outer joins. Here is what the SQL for a left outer join would look like, using the 
tables above:
select * from employee left join location
on employee.empID=location.empID;
A left outer join retains all of the rows of the left table, regardless of whether there is a row that matches on
the right table. The SQL above will give us the result set shown below.
Employee.EmpID  Employee.EmpName  Location.EmpID  Location.EmpLoc
13              Jason             13               San Jose
8               Alex              8                Los Angeles
3               Ram               3                Pune, India
17              Babu              17               Chennai, India
25              Johnson           NULL             NULL
The Join Predicate
Earlier we had mentioned something called a join predicate. In the SQL above, the join predicate
is "on employee.empID = location.empID". This is the heart of any type of join, because it determines
what common column between the 2 tables will be used to "join" the 2 tables. As you can see from the
result set, all of the rows from the left table are returned
